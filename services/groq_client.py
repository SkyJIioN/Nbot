import requests
import os

GROQ_API_KEY = os.getenv("GROQ_API_KEY")

def analyze_with_groq(prices: dict) -> str:
    prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ä–∏–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö —Ü—ñ–Ω:\n\n"
        + "\n".join([f"{symbol}: ${price:.2f}" for symbol, price in prices.items()])
        + "\n\n–ù–∞–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥—É —Ç–∞ –≤–∏—Ö–æ–¥—É."
    )

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "mixtral-8x7b-32768",
        "messages": [{"role": "user", "content": prompt}],
    }

    try:
        response = requests.post("https://api.groq.com/openai/v1/chat/completions", headers=headers, json=payload)
        response.raise_for_status()
        result = response.json()
        
        # üëá –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ 'choices'
        if "choices" in result and len(result["choices"]) > 0:
            return result["choices"][0]["message"]["content"]
        else:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Groq."
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ Groq: {e}"