import requests
import pandas as pd
import numpy as np
from datetime import datetime

API_KEY = "–¢–í–û–ô_API_KEY_CRYPTOCOMPARE"  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ä–µ–∞–ª—å–Ω–∏–π API –∫–ª—é—á
BASE_URL = "https://min-api.cryptocompare.com/data/v2/histohour"

def fetch_ohlcv_data(symbol: str, timeframe: str, limit: int = 100):
    params = {
        "fsym": symbol.upper(),
        "tsym": "USD",
        "limit": limit,
        "api_key": API_KEY
    }

    if timeframe == "1h":
        params["aggregate"] = 1
    elif timeframe == "4h":
        params["aggregate"] = 4
    elif timeframe == "12h":
        params["aggregate"] = 12
    else:
        print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        return None

    try:
        response = requests.get(BASE_URL, params=params)
        data = response.json()

        if data.get("Response") != "Success":
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è OHLCV: {data.get('Message')}")
            return None

        ohlcv = data["Data"]["Data"]
        if len(ohlcv) < 20:
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ OHLCV-–¥–∞–Ω–∏—Ö: {len(ohlcv)} –¥–ª—è {symbol} {timeframe}")
            return None

        df = pd.DataFrame(ohlcv)
        df["datetime"] = pd.to_datetime(df["time"], unit="s")
        df.set_index("datetime", inplace=True)
        df["close"] = df["close"]
        return df

    except Exception as e:
        print(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ OHLCV: {e}")
        return None

def calculate_indicators(df):
    try:
        df["rsi"] = compute_rsi(df["close"])
        df["sma"] = df["close"].rolling(window=14).mean()
        df["ema"] = df["close"].ewm(span=14).mean()
        df["macd"] = df["close"].ewm(span=12).mean() - df["close"].ewm(span=26).mean()
        df["macd_signal"] = df["macd"].ewm(span=9).mean()
        return df
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {e}")
        return df

def compute_rsi(series, period=14):
    delta = series.diff()
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)

    avg_gain = pd.Series(gain).rolling(window=period).mean()
    avg_loss = pd.Series(loss).rolling(window=period).mean()

    rs = avg_gain / (avg_loss + 1e-10)
    rsi = 100 - (100 / (1 + rs))
    return rsi

def analyze_crypto(symbol: str, timeframe: str):
    df = fetch_ohlcv_data(symbol, timeframe)
    if df is None or df.empty:
        return None

    df = calculate_indicators(df)

    if len(df) < 20 or pd.isna(df["rsi"].iloc[-1]):
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
        return None

    latest = df.iloc[-1]

    rsi = latest["rsi"]
    sma = latest["sma"]
    ema = latest["ema"]
    macd = latest["macd"]
    macd_signal = latest["macd_signal"]
    current_price = latest["close"]

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ RSI
    if rsi < 30:
        signal = "üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å ‚Äî –º–æ–∂–ª–∏–≤–∏–π LONG"
    elif rsi > 70:
        signal = "üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å ‚Äî –º–æ–∂–ª–∏–≤–∏–π SHORT"
    else:
        signal = "‚ö™Ô∏è –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É"

    indicators_str = (
        f"üîç –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏:\n"
        f"‚Ä¢ RSI: {rsi:.2f} ({'–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å' if rsi < 30 else '–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å' if rsi > 70 else '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'})\n"
        f"‚Ä¢ SMA: {sma:.2f}\n"
        f"‚Ä¢ EMA: {ema:.2f}\n"
        f"‚Ä¢ MACD: {macd:.2f}, Signal: {macd_signal:.2f}\n"
        f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {signal}"
    )

    entry_price = float(current_price)
    exit_price = entry_price * 1.015 if rsi < 30 else entry_price * 0.985 if rsi > 70 else entry_price

    return indicators_str, entry_price, exit_price, rsi, sma, ema, macd, macd_signal