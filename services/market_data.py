import requests
import pandas as pd
import numpy as np
from datetime import datetime

CRYPTOCOMPARE_API_KEY = "YOUR_API_KEY"
BASE_URL = "https://min-api.cryptocompare.com/data/v2/histohour"

def get_ohlcv(symbol: str, timeframe: str = "1h", limit: int = 100):
    try:
        symbol = symbol.upper()
        aggregate = {"1h": 1, "4h": 4, "12h": 12}.get(timeframe, 1)
        url = f"{BASE_URL}?fsym={symbol}&tsym=USDT&limit={limit}&aggregate={aggregate}&api_key={CRYPTOCOMPARE_API_KEY}"
        response = requests.get(url)
        data = response.json()

        if data.get("Response") != "Success":
            print(f"‚ùå Error fetching OHLCV data: {data.get('Message')}")
            return None

        prices = data["Data"]["Data"]
        if not prices or len(prices) < 20:
            return None

        df = pd.DataFrame(prices)
        df["time"] = pd.to_datetime(df["time"], unit="s")
        df.set_index("time", inplace=True)
        return df

    except Exception as e:
        print(f"‚ùå Error loading OHLCV data: {e}")
        return None

def calculate_rsi(prices, period=14):
    if len(prices) < period + 1:
        return None
    deltas = pd.Series(prices).diff().dropna()
    gains = deltas.where(deltas > 0, 0.0)
    losses = -deltas.where(deltas < 0, 0.0)

    avg_gain = gains.rolling(window=period).mean()
    avg_loss = losses.rolling(window=period).mean()

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))

    return rsi.iloc[-1] if not rsi.empty else None

def calculate_sma(prices, period=14):
    if len(prices) < period:
        return None
    return pd.Series(prices).rolling(window=period).mean().iloc[-1]

async def analyze_crypto(symbol: str, timeframe: str):
    df = get_ohlcv(symbol, timeframe)
    if df is None or df.empty:
        return None

    close = df["close"]
    if close.isnull().any():
        return None

    current_price = float(close.iloc[-1])
    rsi = calculate_rsi(close)
    sma = calculate_sma(close)

    if sma is None:
        return None

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª
    signal = "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É"
    if rsi is not None:
        if rsi > 70:
            signal = "üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å ‚Äî –º–æ–∂–ª–∏–≤–∏–π Short"
        elif rsi < 30:
            signal = "üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å ‚Äî –º–æ–∂–ª–∏–≤–∏–π Long"

    # –¢–æ—á–∫–∏ –≤—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É
    entry_price = current_price
    exit_price = current_price * 1.015 if rsi and rsi < 30 else current_price * 0.985

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
    rsi_display = f"{rsi:.2f}" if rsi is not None and not np.isnan(rsi) else "–ù/–î"
    sma_display = f"{sma:.2f}"
    indicators_str = (
        f"üîç –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏:\n"
        f"‚Ä¢ RSI: {rsi_display} ({signal if rsi_display != '–ù/–î' else '–ù/–î'})\n"
        f"‚Ä¢ SMA: {sma_display}\n"
        f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {signal}"
    )

    return (
        indicators_str,
        round(entry_price, 2),
        round(exit_price, 2),
        rsi_display,
        sma_display,
        round(current_price, 2)
    )