# services/market_data.py

import requests
import pandas as pd
from datetime import datetime, timedelta
import os

CMC_API_KEY = os.getenv("CMC_API_KEY")
CMC_BASE_URL = "https://pro-api.coinmarketcap.com"

headers = {
    "Accepts": "application/json",
    "X-CMC_PRO_API_KEY": CMC_API_KEY
}

def get_ohlcv(symbol: str):
    """–û—Ç—Ä–∏–º—É—î OHLCV –¥–∞–Ω—ñ –∑–∞ 4 –≥–æ–¥–∏–Ω–∏ (24 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–≤—ñ—á–∫–∏ = 4 –¥–Ω—ñ)"""
    url = f"{CMC_BASE_URL}/cryptocurrency/ohlcv/historical"
    params = {
        "symbol": symbol.upper(),
        "convert": "USD",
        "time_start": (datetime.utcnow() - timedelta(days=4)).isoformat(),
        "interval": "4h"
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code != 200:
        raise Exception(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ OHLCV: {response.text}")
    data = response.json()["data"]["quotes"]
    df = pd.DataFrame([{
        "time": q["time_open"],
        "open": q["quote"]["USD"]["open"],
        "high": q["quote"]["USD"]["high"],
        "low": q["quote"]["USD"]["low"],
        "close": q["quote"]["USD"]["close"]
    } for q in data])
    df["time"] = pd.to_datetime(df["time"])
    return df

def calculate_rsi(close_prices, period=14):
    delta = close_prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    return 100 - (100 / (1 + rs))

def analyze_symbol(symbol: str) -> str:
    try:
        df = get_ohlcv(symbol)
        df["SMA20"] = df["close"].rolling(window=20).mean()
        df["RSI"] = calculate_rsi(df["close"])
        latest = df.iloc[-1]

        sma_trend = "–≤–∏—â–µ" if latest["close"] > latest["SMA20"] else "–Ω–∏–∂—á–µ"
        rsi_value = latest["RSI"]

        rsi_sentiment = ""
        if rsi_value < 30:
            rsi_sentiment = "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å (–º–æ–∂–ª–∏–≤–∞ LONG –ø–æ–∑–∏—Ü—ñ—è)"
        elif rsi_value > 70:
            rsi_sentiment = "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å (–º–æ–∂–ª–∏–≤–∞ SHORT –ø–æ–∑–∏—Ü—ñ—è)"
        else:
            rsi_sentiment = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞ –∑–æ–Ω–∞ (–≤–∞—Ä—Ç–æ –∑–∞—á–µ–∫–∞—Ç–∏)"

        entry_price = round(latest["close"], 2)
        exit_price = round(entry_price * 1.05, 2) if "LONG" in rsi_sentiment else round(entry_price * 0.95, 2)

        return (
            f"üîç –ê–Ω–∞–ª—ñ–∑ {symbol.upper()} (4H):\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${entry_price}\n"
            f"–¶—ñ–Ω–∞ {sma_trend} SMA20\n"
            f"RSI: {rsi_value:.2f} ‚Äî {rsi_sentiment}\n"
            f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è: {'LONG' if 'LONG' in rsi_sentiment else 'SHORT' if 'SHORT' in rsi_sentiment else '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è'}\n"
            f"üìà –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É: ${entry_price}\n"
            f"üìâ –¢–æ—á–∫–∞ –≤–∏—Ö–æ–¥—É: ${exit_price}"
        )
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol.upper()}: {e}"