import os
import requests

GROQ_API_KEY = os.getenv("GROQ_API_KEY")


def build_prompt(symbol, timeframe, rsi, sma, ema, macd, macd_signal, bb_upper, bb_lower, trend, support, resistance):
    return f"""
üîé –ê–Ω–∞–ª—ñ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ {timeframe.upper()} –∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏:
- RSI: {rsi:.2f}
- SMA: {sma:.2f}
- EMA: {ema:.2f}
- MACD: {macd:.2f}
- MACD Signal: {macd_signal:.2f}
- Bollinger Bands: –í–µ—Ä—Ö–Ω—è {bb_upper:.2f}, –ù–∏–∂–Ω—è {bb_lower:.2f}
- –¢—Ä–µ–Ω–¥: {trend}
- –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: {support:.2f}
- –û–ø—ñ—Ä: {resistance:.2f}

–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü–∏—Ö –¥–∞–Ω–∏—Ö:
1. –û—Ü—ñ–Ω–∏ —Ä–∏–Ω–∫–æ–≤—É —Å–∏—Ç—É–∞—Ü—ñ—é (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å, –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ).
2. –ó—Ä–æ–±–∏ –≤–∏—Å–Ω–æ–≤–æ–∫: LONG, SHORT –∞–±–æ –û—á—ñ–∫—É–≤–∞—Ç–∏.
3. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π:
   - –¢–æ—á–∫—É –≤—Ö–æ–¥—É
   - –°—Ç–æ–ø-–ª–æ—Å—Å
   - –¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç
   - –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –≤ –≥–æ–¥–∏–Ω–∞—Ö
   - –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–µ –∫—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
- –ü–æ–∑–∏—Ü—ñ—è: LONG –∞–±–æ SHORT
- –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É: 
- –¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç: 
- –°—Ç–æ–ø-–ª–æ—Å—Å: 
- –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å: 
- –ö—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ: 

–û–ø–∏—Å —Ä–∏–Ω–∫–æ–≤–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó: [1-2 —Ä–µ—á–µ–Ω–Ω—è]
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∞–∫–æ–Ω—ñ—á–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
"""


async def generate_signal_description(symbol, timeframe, rsi, sma, ema, macd, macd_signal, trend, support, resistance):
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "llama3-70b-8192",
        "messages": [
            {
                "role": "system",
                "content": "–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä-–∞–Ω–∞–ª—ñ—Ç–∏–∫. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."
            },
            {
                "role": "user",
                "content": build_prompt(symbol, timeframe, rsi, sma, ema, macd, macd_signal, bb_upper, bb_lower, trend, support, resistance)
            }
        ],
        "temperature": 0.4
    }

    try:
        response = requests.post(
            "https://api.groq.com/openai/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=10
        )
        response.raise_for_status()
        data = response.json()
        return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ Groq: {e}"