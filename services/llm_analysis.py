import os
import aiohttp
from dotenv import load_dotenv

load_dotenv()

GROQ_API_KEY = os.getenv("GROQ_API_KEY")
GROQ_URL = "https://api.groq.com/openai/v1/chat/completions"


def build_prompt(symbol, timeframe, rsi, sma, ema, macd, macd_signal, trend, support, resistance, price):
    return f"""
üîé –ê–Ω–∞–ª—ñ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ {timeframe.upper()}.

üìà –¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏:
- –¶—ñ–Ω–∞: {price:.2f} USD
- RSI: {rsi:.2f}
- SMA: {sma:.2f}
- EMA: {ema:.2f}
- MACD: {macd:.2f}
- MACD Signal: {macd_signal:.2f}
- –¢—Ä–µ–Ω–¥: {trend}
- –õ—ñ–Ω—ñ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {support:.2f}
- –õ—ñ–Ω—ñ—è –æ–ø–æ—Ä—É: {resistance:.2f}

üîç –ó–∞–≤–¥–∞–Ω–Ω—è:
–û—Ü—ñ–Ω–∏ —Å–∏—Ç—É–∞—Ü—ñ—é —Ç–∞ –Ω–∞–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞.

üìå –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
- –ü–æ–∑–∏—Ü—ñ—è: LONG –∞–±–æ SHORT
- –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É:
- –¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç:
- –°—Ç–æ–ø-–ª–æ—Å—Å:
- –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å:
- –û–ø–∏—Å —Ä–∏–Ω–∫–æ–≤–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó (–ª–∞–∫–æ–Ω—ñ—á–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é)
"""


async def generate_signal_description(
    symbol: str,
    timeframe: str,
    rsi: float,
    sma: float,
    ema: float,
    macd: float,
    macd_signal: float,
    trend: str,
    support: float,
    resistance: float,
    price: float
) -> str:
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "llama3-70b-8192",
        "messages": [
            {
                "role": "system",
                "content": "–¢–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∞–∫–æ–Ω—ñ—á–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
            },
            {
                "role": "user",
                "content": build_prompt(symbol, timeframe, rsi, sma, ema, macd, macd_signal, trend, support, resistance, price)
            }
        ],
        "temperature": 0.4
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(GROQ_URL, headers=headers, json=payload, timeout=15) as resp:
                resp.raise_for_status()
                data = await resp.json()
                return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ Groq: {e}"