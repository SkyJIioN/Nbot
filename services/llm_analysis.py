import os
import requests
import numpy as np

GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ NaN, None, inf
def safe_format(value):
    try:
        if value is None or isinstance(value, str):
            return "N/A"
        if np.isnan(value) or np.isinf(value):
            return "N/A"
        return f"{value:.2f}"
    except:
        return "N/A"

def build_prompt(symbol, timeframe, rsi, sma, ema, macd, macd_signal):
    return f"""
–ê–Ω–∞–ª—ñ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ {timeframe.upper()} –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏:
- RSI: {safe_format(rsi)}
- SMA: {safe_format(sma)}
- EMA: {safe_format(ema)}
- MACD: {safe_format(macd)}
- MACD Signal: {safe_format(macd_signal)}

–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–æ—Ç–∫–æ (1-2 —Ä–µ—á–µ–Ω–Ω—è) –æ—Ü—ñ–Ω–∏ —Å–∏—Ç—É–∞—Ü—ñ—é:
1. –û–ø–∏—à–∏ —Å—Ç–∞–Ω —Ä–∏–Ω–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ, –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å).
2. –ó—Ä–æ–±–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é: LONG, SHORT –∞–±–æ –û—á—ñ–∫—É–≤–∞—Ç–∏.
"""

# üîÅ –§—É–Ω–∫—Ü—ñ—è –°–ò–ù–•–†–û–ù–ù–ê, –±–æ requests ‚Äî –Ω–µ async
def generate_signal_description(symbol, timeframe, rsi, sma, ema, macd, macd_signal):
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "mixtral-8x7b-32768",
        "messages": [
            {
                "role": "system",
                "content": "–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä-–∞–Ω–∞–ª—ñ—Ç–∏–∫. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."
            },
            {
                "role": "user",
                "content": build_prompt(symbol, timeframe, rsi, sma, ema, macd, macd_signal)
            }
        ],
        "temperature": 0.4
    }

    try:
        response = requests.post(
            "https://api.groq.com/openai/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=10
        )
        response.raise_for_status()
        data = response.json()
        return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ Groq: {e}"