import os
import logging
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from services.market_data import get_btc_price
from services.groq_client.py import ask_groq

TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://your-render-url.onrender.com{WEBHOOK_PATH}"

app = FastAPI()
telegram_app = Application.builder().token(TOKEN).build()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ /analyze –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É BTC.")

# –ö–æ–º–∞–Ω–¥–∞ /analyze
async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = get_btc_price()
        prompt = (
            f"–¶—ñ–Ω–∞ BTC/USDT –∑–∞—Ä–∞–∑ {price}$. "
            "–ß–∏ –≤–∞—Ä—Ç–æ –≤—Ö–æ–¥–∏—Ç–∏ –≤ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ 1H –≥—Ä–∞—Ñ—ñ–∫—É? "
            "–î–∞–π –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ 3 —Ä–µ—á–µ–Ω—å), –∞—Ä–≥—É–º–µ–Ω—Ç—É–π —Ç–µ—Ö–Ω—ñ—á–Ω–æ. "
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
        )
        answer = ask_groq(prompt)
        await update.message.reply_text(f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTC: ${price}\n\nü§ñ {answer}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É.")

telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("analyze", analyze))

@app.on_event("startup")
async def startup():
    await telegram_app.bot.set_webhook(WEBHOOK_URL)
    telegram_app.initialize()

@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request):
    await telegram_app.process_update(Update.de_json(await req.json(), telegram_app.bot))
    return {"ok": True}
