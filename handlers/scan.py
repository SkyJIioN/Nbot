from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description


async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message_text = update.message.text
        if not message_text:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            return

        parts = message_text.strip().split(maxsplit=1)
        if len(parts) < 2:
            await update.message.reply_text("üìù –í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª–∏ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–º—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /scan (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `/scan BTC, ETH, SOL`)", parse_mode="Markdown")
            return

        input_symbols = parts[1].replace(" ", "").split(",")
        timeframe = "1h"
        messages = []

        for symbol in input_symbols:
            try:
                print(f"üîç –ê–Ω–∞–ª—ñ–∑—É—é {symbol}...")
                result = analyze_crypto(symbol, timeframe)

                if not result:
                    await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
                    continue

                (
                    indicators_str,
                    current_price,
                    entry_price,
                    exit_price,
                    rsi,
                    sma,
                    ema,
                    macd,
                    macd_signal,
                    bb_upper,
                    bb_lower,
                    trend,
                    support,
                    resistance
                ) = result

                llm_response = await generate_signal_description(
    symbol, timeframe, rsi, sma, ema, macd, macd_signal,
    bb_upper, bb_lower, trend, support, resistance, current_price
)

print(f"üîÅ –í—ñ–¥–ø–æ–≤—ñ–¥—å LLM –¥–ª—è {symbol}:\n{llm_response}")

                if not llm_response:
                    await update.message.reply_text(f"‚ö†Ô∏è LLM –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {symbol}")
                    continue

                print(f"üîÅ LLM –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {symbol}:\n{llm_response}")

                if "LONG" in llm_response or "SHORT" in llm_response:
                    response = (
                        f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} ({timeframe.upper()}):\n"
                        f"{llm_response}\n"
                        f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price:.5f}$\n"
                        f"üîÅ RSI: {rsi:.2f}\n"
                        f"üìä SMA: {sma:.2f}\n"
                        f"üìâ EMA: {ema:.2f}\n"
                        f"üìä MACD: {macd:.2f}, –°–∏–≥–Ω–∞–ª—å–Ω–∞: {macd_signal:.2f}\n"
                        f"üìä Bollinger Bands: –í–µ—Ä—Ö–Ω—è {bb_upper:.2f}$ / –ù–∏–∂–Ω—è {bb_lower:.2f}$\n"
                        f"üìâ –¢—Ä–µ–Ω–¥: {trend.capitalize()}\n"
                        f"üîª –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: {support:.2f}$, üî∫ –û–ø—ñ—Ä: {resistance:.2f}$"
                    )
                    messages.append(response)
            except Exception as err:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É {symbol}: {err}")

        if messages:
            for msg in messages:
                await update.message.reply_text(msg)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (LONG –∞–±–æ SHORT) —Å–µ—Ä–µ–¥ –≤–∫–∞–∑–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç.")

    except Exception as main_error:
        await update.message.reply_text(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {main_error}")