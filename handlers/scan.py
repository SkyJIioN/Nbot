from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    timeframe = "1h"
    messages = []

    # üßæ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø–µ—Ä–µ–¥–∞–≤ –º–æ–Ω–µ—Ç–∏
    if not context.args:
        await update.message.reply_text(
            "üîé –í–≤–µ–¥—ñ—Ç—å –º–æ–Ω–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ –∫–æ–º—É:\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /scan BTC ETH SOL –∞–±–æ /scan BTC,ETH"
        )
        return

    # üîç –û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É –º–æ–Ω–µ—Ç (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ –∫–æ–º—É)
    raw_input = " ".join(context.args)
    if "," in raw_input:
        symbols = [s.strip().upper() for s in raw_input.split(",") if s.strip()]
    else:
        symbols = [s.strip().upper() for s in raw_input.split(" ") if s.strip()]

    for symbol in symbols:
        result = analyze_crypto(symbol, timeframe)
        if not result:
            continue

        try:
            (
                indicators_str,
                current_price,
                entry_price,
                exit_price,
                rsi,
                sma,
                ema,
                macd,
                macd_signal,
                bb_upper,
                bb_lower,
                trend,
                support,
                resistance
            ) = result

            llm_response = await generate_signal_description(
                symbol, timeframe, rsi, sma, ema, macd, macd_signal,
                trend, support, resistance
            )

            if "LONG" in llm_response or "SHORT" in llm_response:
                response = (
                    f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} ({timeframe.upper()}):\n"
                    f"{llm_response}\n"
                    f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price:.2f}$"
                )
                messages.append(response)

        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")

    if messages:
        for msg in messages:
            await update.message.reply_text(msg)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (LONG –∞–±–æ SHORT) —Å–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç.")