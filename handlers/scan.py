from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description

# üëâ –ú–æ–Ω–µ—Ç–∏, —è–∫—ñ –±—É–¥–µ–º–æ —Å–∫–∞–Ω—É–≤–∞—Ç–∏
SYMBOLS = ["BTC", "ETH", "SOL", "APT", "BCH", "XRP", "LTC", "LINK"]
TIMEFRAME = "1h"

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –°–∫–∞–Ω—É—é –º–æ–Ω–µ—Ç–∏ –∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º 1H. –¶–µ –∑–∞–π–º–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...")

    results = []
    for symbol in SYMBOLS:
        try:
            result = analyze_crypto(symbol, TIMEFRAME)
            if not result:
                continue

            (
                indicators_str,
                current_price,
                entry_price,
                exit_price,
                rsi,
                sma,
                ema,
                macd,
                macd_signal,
                bb_upper,
                bb_lower,
                trend,
                support_level,
                resistance_level
            ) = result

            llm_response = await generate_signal_description(
                symbol, TIMEFRAME, rsi, sma, ema, macd, macd_signal, trend
            )

            # üéØ –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ —Å–∏–≥–Ω–∞–ª–∏ LONG –∞–±–æ SHORT
            if "LONG" in llm_response.upper() or "SHORT" in llm_response.upper():
                results.append(f"üìä {symbol}:\n{llm_response}\nüí± –¶—ñ–Ω–∞: {current_price:.2f}$\n")

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
            continue

    if results:
        reply = "‚úÖ –ú–æ–Ω–µ—Ç–∏ –∑ —á—ñ—Ç–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏:\n\n" + "\n".join(results)
    else:
        reply = "‚ö†Ô∏è –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (LONG –∞–±–æ SHORT) —Å–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç."

    await update.message.reply_text(reply)