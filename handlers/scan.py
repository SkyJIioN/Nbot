from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description


# –ö—Ä–æ–∫ 1: –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /scan
async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(
            "üîç –í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª–∏ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTC, ETH, SOL):"
        )
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ scan_command: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è.")


# –ö—Ä–æ–∫ 2: –û–±—Ä–æ–±–∫–∞ –º–æ–Ω–µ—Ç, –≤–≤–µ–¥–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
async def handle_scan_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_input = update.message.text
        symbols = [s.strip().upper() for s in user_input.split(",")]
        timeframe = "1h"
        messages = []

        for symbol in symbols:
            try:
                result = analyze_crypto(symbol, timeframe)
                if not result:
                    await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
                    continue

                (
                    indicators_str,
                    current_price,
                    entry_price,
                    exit_price,
                    rsi,
                    sma,
                    ema,
                    macd,
                    macd_signal,
                    bb_upper,
                    bb_lower,
                    trend,
                    support,
                    resistance,
                    price,
                ) = result

                try:
                    llm_response = await generate_signal_description(
                        symbol, timeframe, rsi, sma, ema, macd, macd_signal,
                        bb_upper, bb_lower, trend, support, resistance, price
                    )

                    print(f"üîÅ –í—ñ–¥–ø–æ–≤—ñ–¥—å LLM –¥–ª—è {symbol}:\n{llm_response}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É –¥–ª—è {symbol}: {e}")
                    continue

                if "LONG" in llm_response or "SHORT" in llm_response:
                    message = (
                        f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} ({timeframe.upper()}):\n"
                        f"{llm_response}\n"
                        f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {float(price):.5f}$\n"
                        f"üîÅ RSI: {rsi:.2f}\n"
                        f"üìä SMA: {sma:.2f}\n"
                        f"üìâ EMA: {ema:.2f}\n"
                        f"üìä MACD: {macd:.2f}, –°–∏–≥–Ω–∞–ª—å–Ω–∞: {macd_signal:.2f}\n"
                        f"üìä Bollinger Bands: –í–µ—Ä—Ö–Ω—è {bb_upper:.2f}$ / –ù–∏–∂–Ω—è {bb_lower:.2f}$\n"
                        f"üìâ –¢—Ä–µ–Ω–¥: {trend.capitalize()}\n"
                        f"üîª –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: {support:.2f}$, üî∫ –û–ø—ñ—Ä: {resistance:.2f}$"
                    )
                    messages.append(message)

            except Exception as e:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
                continue

        if messages:
            for msg in messages:
                await update.message.reply_text(msg)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (LONG –∞–±–æ SHORT) —Å–µ—Ä–µ–¥ –≤–∫–∞–∑–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç.")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_scan_input: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –º–æ–Ω–µ—Ç.")