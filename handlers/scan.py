from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    timeframe = "1h"
    messages = []

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–Ω–µ—Ç–∏ –∑ —Ç–µ–∫—Å—Ç—É –∫–æ–º–∞–Ω–¥–∏
    if context.args:
        input_text = " ".join(context.args)
        symbols = [s.strip().upper() for s in input_text.replace(",", " ").split()]
    else:
        await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å –º–æ–Ω–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `/scan BTC, ETH, SOL`", parse_mode="Markdown")
        return

    for symbol in symbols:
        try:
            result = analyze_crypto(symbol, timeframe)
            if not result:
                continue

            (
                indicators_str,
                current_price,
                entry_price,
                exit_price,
                rsi,
                sma,
                ema,
                macd,
                macd_signal,
                bb_upper,
                bb_lower,
                trend,
                support,
                resistance
            ) = result

            llm_response = await generate_signal_description(
    symbol, timeframe, rsi, sma, ema, macd, macd_signal,
    trend, support, resistance,
    bb_upper, bb_lower, current_price
)

            if "LONG" in llm_response or "SHORT" in llm_response:
                response = (
                    f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} ({timeframe.upper()}):\n"
                    f"{llm_response}\n"
                    f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price:.2f}$\n"
                    f"üìâ –¢—Ä–µ–Ω–¥: {trend.capitalize()}\n"
                    f"üîª –õ—ñ–Ω—ñ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {support:.2f}$\n"
                    f"üî∫ –õ—ñ–Ω—ñ—è –æ–ø–æ—Ä—É: {resistance:.2f}$\n"
                    f"üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É: {entry_price:.2f}$\n"
                    f"üìà –¢–æ—á–∫–∞ –≤–∏—Ö–æ–¥—É: {exit_price:.2f}$\n"
                    f"üîÅ RSI: {rsi:.2f}\n"
                    f"üìä SMA: {sma:.2f}\n"
                    f"üìâ EMA: {ema:.2f}\n"
                    f"üìä MACD: {macd:.2f}, –°–∏–≥–Ω–∞–ª—å–Ω–∞: {macd_signal:.2f}\n"
                    f"üìä Bollinger Bands: –í–µ—Ä—Ö–Ω—è {bb_upper:.2f}$ / –ù–∏–∂–Ω—è {bb_lower:.2f}$"
                )
                messages.append(response)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")

    if messages:
        for msg in messages:
            await update.message.reply_text(msg)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (LONG –∞–±–æ SHORT) —Å–µ—Ä–µ–¥ –≤–≤–µ–¥–µ–Ω–∏—Ö –º–æ–Ω–µ—Ç.")