from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    timeframe = "1h"

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /scan
    text = update.message.text.replace("/scan", "").strip()

    if not text:
        await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å –º–æ–Ω–µ—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n`/scan BTC, ETH, SOL`", parse_mode="Markdown")
        return

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —É —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
    symbols = [s.strip().upper() for s in text.split(",") if s.strip()]
    messages = []

    for symbol in symbols:
        try:
            result = analyze_crypto(symbol, timeframe)
            if not result:
                continue

            (
                indicators_str,
                current_price,
                entry_price,
                exit_price,
                rsi,
                sma,
                ema,
                macd,
                macd_signal,
                bb_upper,
                bb_lower,
                trend,
                support,
                resistance,
                price
            ) = result

            llm_response = await generate_signal_description(
                symbol, timeframe, rsi, sma, ema, macd, macd_signal,
                bb_upper, bb_lower, trend, support, resistance, price
            )

            if "LONG" in llm_response or "SHORT" in llm_response:
                response = (
                    f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} ({timeframe.upper()}):\n"
                    f"{llm_response}\n"
                    f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price:.2f}$\n"
                    f"üîÅ RSI: {rsi:.2f}\n"
                    f"üìä SMA: {sma:.2f}\n"
                    f"üìâ EMA: {ema:.2f}\n"
                    f"üìä MACD: {macd:.2f}, –°–∏–≥–Ω–∞–ª—å–Ω–∞: {macd_signal:.2f}\n"
                    f"üìä Bollinger Bands: –í–µ—Ä—Ö–Ω—è {bb_upper:.2f}$ / –ù–∏–∂–Ω—è {bb_lower:.2f}$\n"
                    f"üìâ –¢—Ä–µ–Ω–¥: {trend.capitalize()