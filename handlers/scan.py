# scan.py
from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∞–º –≤–≤–æ–¥–∏—Ç—å –º–æ–Ω–µ—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ –∫–æ–º—É
async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    timeframe = "1h"

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª–∏ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n/scan BTC ETH SOL")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
    text = " ".join(context.args).replace(",", " ")
    symbols = [s.upper() for s in text.split() if s.strip()]
    messages = []

    for symbol in symbols:
        try:
            result = analyze_crypto(symbol, timeframe)
            if not result:
                continue

            (
                indicators_str,
                current_price,
                entry_price,
                exit_price,
                rsi,
                sma,
                ema,
                macd,
                macd_signal,
                bb_upper,
                bb_lower,
                trend,
                support,
                resistance
            ) = result

            # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            current_price = float(current_price)
            entry_price = float(entry_price)
            exit_price = float(exit_price)
            rsi = float(rsi)
            sma = float(sma)
            ema = float(ema)
            macd = float(macd)
            macd_signal = float(macd_signal)
            bb_upper = float(bb_upper)
            bb_lower = float(bb_lower)
            support = float(support)
            resistance = float(resistance)

            # üß† –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM
            llm_response = await generate_signal_description(
                symbol, timeframe, rsi, sma, ema, macd, macd_signal,
                trend, support, resistance, current_price
            )

            # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–æ–Ω–µ—Ç–∏ –∑ —Å–∏–≥–Ω–∞–ª–∞–º–∏
            if "LONG" in llm_response or "SHORT" in llm_response:
                response = (
                    f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} ({timeframe.upper()}):\n"
                    f"{llm_response}\n"
                    f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price:.2f}$\n"
                    f"üìâ –¢—Ä–µ–Ω–¥: {trend.capitalize()}\n"
                    f"üîª –õ—ñ–Ω—ñ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {support:.2f}$\n"
                    f"üî∫ –õ—ñ–Ω—ñ—è –æ–ø–æ—Ä—É: {resistance:.2f}$\n"
                    f"üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É: {entry_price:.2f}$\n"
                    f"üìà –¢–æ—á–∫–∞ –≤–∏—Ö–æ–¥—É: {exit_price:.2f}$\n"
                    f"üîÅ RSI: {rsi:.2f}\n"
                    f"üìä SMA: {sma:.2f}\n"
                    f"üìâ EMA: {ema:.2f}\n"
                    f"üìä MACD: {macd:.2f}, –°–∏–≥–Ω–∞–ª—å–Ω–∞: {macd_signal:.2f}\n"
                    f"üìä Bollinger Bands: –í–µ—Ä—Ö–Ω—è {bb_upper:.2f}$ / –ù–∏–∂–Ω—è {bb_lower:.2f}$"
                )
                messages.append(response)

        except Exception as e:
            messages.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")

    if messages:
        for msg in messages:
            await update.message.reply_text(msg)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (LONG –∞–±–æ SHORT) —Å–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç.")