from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description

MONITOR_SYMBOLS = ["BTC", "ETH", "SOL", "APT", "BCH", "XRP", "MATIC"]
TIMEFRAME = "1h"

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîé –°–∫–∞–Ω—É—é –º–æ–Ω–µ—Ç–∏... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.")

    results = []
    for symbol in MONITOR_SYMBOLS:
        try:
            result = analyze_crypto(symbol, TIMEFRAME)
            if not result:
                continue

            (
                indicators_str,
                current_price,
                entry_price,
                exit_price,
                rsi,
                sma,
                ema,
                macd,
                macd_signal,
                bb_upper,
                bb_lower,
                trend,
                support,
                resistance
            ) = result

            llm_response = await generate_signal_description(
                symbol, TIMEFRAME, rsi, sma, ema, macd, macd_signal, trend, support, resistance
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —á—ñ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
            if "LONG" in llm_response.upper() or "SHORT" in llm_response.upper():
                results.append(
                    f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol}:"
                    f"{llm_response}"
                    f"üí± –¶—ñ–Ω–∞: {current_price:.2f}$\n"
                    f"üîÅ RSI: {rsi:.2f}, SMA: {sma:.2f}, EMA: {ema:.2f}\n"
                    f"üìä MACD: {macd:.2f}, Signal: {macd_signal:.2f}\n"
                    f"üìâ –¢—Ä–µ–Ω–¥: {trend}, Support: {support:.2f}$, Resistance: {resistance:.2f}$"
                )
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")

    if results:
        await update.message.reply_text("\n\n".join(results))
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (LONG –∞–±–æ SHORT) —Å–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç.")