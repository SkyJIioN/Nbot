from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description


async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        symbols = [s.strip().upper() for s in " ".join(context.args).replace(",", " ").split()]
    else:
        await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å –º–æ–Ω–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /scan BTC ETH SOL")
        return

    messages = []

    for symbol in symbols:
        try:
            result = await analyze_crypto(symbol, "1h")
            if not result:
                messages.append(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
                continue

            (
                indicators_str,
                current_price,
                entry_price,
                exit_price,
                rsi,
                sma,
                ema,
                macd,
                macd_signal,
                bb_upper,
                bb_lower,
                trend,
                support,
                resistance
            ) = result

            llm_response = await generate_signal_description(
                symbol, "1h", rsi, sma, ema, macd, macd_signal,
                bb_upper, bb_lower, trend, support, resistance, current_price
            )

            if "LONG" in llm_response or "SHORT" in llm_response:
                msg = (
                    f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} (1H):\n"
                    f"{llm_response}\n"
                    f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {float(current_price):.5f}$\n"
                    f"üîÅ RSI: {rsi:.2f}\n"
                    f"üìä SMA: {sma:.2f}\n"
                    f"üìâ EMA: {ema:.2f}\n"
                    f"üìä MACD: {macd:.2f}, –°–∏–≥–Ω–∞–ª—å–Ω–∞: {macd_signal:.2f}\n"
                    f"üìä Bollinger Bands: –í–µ—Ä—Ö–Ω—è {bb_upper:.2f}$ / –ù–∏–∂–Ω—è {bb_lower:.2f}$\n"
                    f"üìâ –¢—Ä–µ–Ω–¥: {trend.capitalize()}\n"
                    f"üîª –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: {support:.2f}$, üî∫ –û–ø—ñ—Ä: {resistance:.2f}$"
                )
                messages.append(msg)

        except Exception as e:
            messages.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ {symbol}: {e}")

    if messages:
        for m in messages:
            await update.message.reply_text(m)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (LONG –∞–±–æ SHORT) —Å–µ—Ä–µ–¥ –≤–∫–∞–∑–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç.")