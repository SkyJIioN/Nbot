from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description

# –¢–∏–º—á–∞—Å–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç (–∑–∞–º—ñ—Å—Ç—å —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ–≥–æ)
MONETS = ["AKT", "BTC", "ETH", "SOL", "APT", "BCH", "XRP"]

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    timeframe = "1h"
    messages = []

    for symbol in MONETS:
        try:
            result = await analyze_crypto(symbol, timeframe)
            if not result:
                continue

            (
                indicators_str,
                current_price,
                entry_price,
                exit_price,
                rsi,
                sma,
                ema,
                macd,
                macd_signal,
                bb_upper,
                bb_lower,
                trend,
                support,
                resistance,
                price
            ) = result

            # –í–∏–∫–ª–∏–∫ LLM
            llm_response = await generate_signal_description(
                symbol, timeframe, rsi, sma, ema, macd, macd_signal,
                trend, support, resistance, price
            )

            if "LONG" in llm_response or "SHORT" in llm_response:
                response = (
                    f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} ({timeframe.upper()}):\n"
                    f"{llm_response}\n"
                    f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {float(current_price):.2f}$\n"
                    f"üìâ –¢—Ä–µ–Ω–¥: {trend.capitalize()}\n"
                    f"üîª –õ—ñ–Ω—ñ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {float(support):.2f}$\n"
                    f"üî∫ –õ—ñ–Ω—ñ—è –æ–ø–æ—Ä—É: {float(resistance):.2f}$\n"
                    f"üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É: {float(entry_price):.2f}$\n"
                    f"üìà –¢–æ—á–∫–∞ –≤–∏—Ö–æ–¥—É: {float(exit_price):.2f}$\n"
                    f"üîÅ RSI: {float(rsi):.2f}\n"
                    f"üìä SMA: {float(sma):.2f}\n"
                    f"üìâ EMA: {float(ema):.2f}\n"
                    f"üìä MACD: {float(macd):.2f}, –°–∏–≥–Ω–∞–ª—å–Ω–∞: {float(macd_signal):.2f}\n"
                    f"üìä Bollinger Bands: –í–µ—Ä—Ö–Ω—è {float(bb_upper):.2f}$ / –ù–∏–∂–Ω—è {float(bb_lower):.2f}$"
                )
                messages.append(response)

        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")

    if messages:
        for msg in messages:
            await update.message.reply_text(msg)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (LONG –∞–±–æ SHORT) —Å–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç.")