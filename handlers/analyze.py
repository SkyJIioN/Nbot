from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import get_crypto_price
from services.groq_client import ask_groq

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTC, ETH, SOL)")

async def handle_symbol_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    symbol = update.message.text.strip().upper()
    try:
        price = get_crypto_price(symbol)
        if price is None:
            raise ValueError("–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É")
        prompt = f"–ó–∞—Ä–∞–∑ —Ü—ñ–Ω–∞ {symbol} —Å—Ç–∞–Ω–æ–≤–∏—Ç—å {price} –¥–æ–ª–∞—Ä—ñ–≤. –ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó."
        reply = ask_groq(prompt)
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
