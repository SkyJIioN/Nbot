async def handle_timeframe_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    timeframe = query.data.replace("tf_", "")
    symbol = context.user_data.get("symbol")

    await query.edit_message_text(f"‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ {timeframe.upper()}...")

    try:
        result = analyze_crypto(symbol, timeframe)  # ‚¨ÖÔ∏è –±–µ–∑ await

        if result is None:
            await query.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è {symbol}")
            return

        indicators_str, entry_price, exit_price, rsi, sma = result

        response = (
            f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} ({timeframe.upper()}):\n"
            f"{indicators_str}\n"
            f"üí∞ –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É: {entry_price:.2f}$\n"
            f"üìà –¶—ñ–ª—å –¥–ª—è –≤–∏—Ö–æ–¥—É: {exit_price:.2f}$\n"
            f"üîÅ RSI: {rsi:.2f}\n"
            f"üìä SMA: {sma:.2f}"
        )
        await query.message.reply_text(response)

    except Exception as e:
        await query.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ: {e}")