from telegram import Update 
from telegram.ext import ContextTypes

from services.market_data import get_analysis_for_symbol

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTC –∞–±–æ ETH), —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑.")

async def handle_symbol_input(update: Update, context: ContextTypes.DEFAULT_TYPE): symbol = update.message.text.strip().upper() await update.message.reply_text(f"–ê–Ω–∞–ª—ñ–∑—É—é {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ 4 –≥–æ–¥–∏–Ω–∏...")

result = await get_analysis_for_symbol(symbol)
if isinstance(result, str):
    await update.message.reply_text(result)
    return

rsi = result['rsi']
sma = result['sma']
current_price = result['current_price']

signal = ""
entry = current_price
take_profit = None
stop_loss = None

if rsi < 30 and current_price > sma:
    signal = "LONG üìà"
    take_profit = round(entry * 1.03, 2)
    stop_loss = round(entry * 0.97, 2)
elif rsi > 70 and current_price < sma:
    signal = "SHORT üìâ"
    take_profit = round(entry * 0.97, 2)
    stop_loss = round(entry * 1.03, 2)
else:
    signal = "–ù–µ–º–∞—î —á—ñ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É. üìä"

response = (
    f"–ú–æ–Ω–µ—Ç–∞: {symbol}" 
f"–¶—ñ–Ω–∞: ${current_price}" 
f"RSI: {rsi} | SMA: {sma}" 
f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {signal}" )

if take_profit and stop_loss:
    response += f"\n–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É: ${entry}\nTake Profit: ${take_profit}\nStop Loss: ${stop_loss}"

await update.message.reply_text(response)

