from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.market_data import analyze_crypto
from services.llm_analysis import generate_signal_description

# –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∏
TIMEFRAMES = {
    "1H": "1h",
    "4H": "4h",
    "12H": "12h"
}

# –ö—Ä–æ–∫ 1: –ö–æ–º–∞–Ω–¥–∞ /analyze
async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("\U0001F50E –í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTC, ETH, SOL):")

# –ö—Ä–æ–∫ 2: –í–≤—ñ–¥ –º–æ–Ω–µ—Ç–∏
async def handle_symbol_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    symbol = update.message.text.strip().upper()
    context.user_data["symbol"] = symbol

    keyboard = [
        [InlineKeyboardButton(tf, callback_data=f"tf_{TIMEFRAMES[tf]}")]
        for tf in TIMEFRAMES
    ]
    await update.message.reply_text(
        f"\U0001F4C8 –û–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è {symbol}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ö—Ä–æ–∫ 3: –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
async def handle_timeframe_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    timeframe = query.data.replace("tf_", "")
    symbol = context.user_data.get("symbol")
    await query.edit_message_text(f"‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ {timeframe.upper()}...")

    try:
        result = analyze_crypto(symbol, timeframe)

        if not result:
            await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
            return

        (
            indicators_str,
            current_price,
            entry_price,
            exit_price,
            rsi,
            sma,
            ema,
            macd,
            macd_signal,
            bb_upper,
            bb_lower
        ) = result

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥ LLM (Groq)
        llm_response = await generate_signal_description(
            symbol, timeframe, rsi, sma, ema, macd, macd_signal
        )

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        response = (
            f"\U0001F4CA –ê–Ω–∞–ª—ñ–∑ {symbol} ({timeframe.upper()}):\n"
            f"{llm_response}\n"
            f"\U0001F4B1 –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price:.2f}$\n"
            f"\U0001F4B0 –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É: {entry_price:.2f}$\n"
            f"\U0001F4C8 –¶—ñ–ª—å –¥–ª—è –≤–∏—Ö–æ–¥—É: {exit_price:.2f}$\n"
            f"üîÅ RSI: {rsi:.2f}\n"
            f"üìä SMA: {sma:.2f}\n"
            f"üìâ EMA: {ema:.2f}\n"
            f"üìä MACD: {macd:.2f}, –°–∏–≥–Ω–∞–ª—å–Ω–∞: {macd_signal:.2f}\n"
            f"üìä Bollinger Bands: –í–µ—Ä—Ö–Ω—è {bb_upper:.2f}$ / –ù–∏–∂–Ω—è {bb_lower:.2f}$"
        )

        await query.message.reply_text(response)

    except Exception as e:
        await query.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ: {e}")