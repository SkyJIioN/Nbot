from services.ta_analysis import fetch_historical_prices, analyze_technical
from config import COINMARKETCAP_API_KEY  
from telegram import Update
from telegram.ext import ContextTypes
from services.market_data import fetch_price
from services.groq_client import ask_groq

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTC):")

asasync def handle_symbol_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    symbol = update.message.text.strip().upper()

    try:
        df = fetch_historical_prices(symbol, COINMARKETCAP_API_KEY)
        analysis = analyze_technical(df)

        message = (
            f"üîç –ê–Ω–∞–ª—ñ–∑ –¥–ª—è {symbol}:\n"
            f"üìà –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${analysis['price']}\n"
            f"üìä SMA(14): ${analysis['SMA']}\n"
            f"üíπ RSI: {analysis['RSI']:.2f}\n"
            f"üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {analysis['recommendation']}"
        )
    except Exception as e:
        message = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø–æ {symbol}. –ü–æ–º–∏–ª–∫–∞: {e}"

    await update.message.reply_text(message)