from telegram import Update
from telegram.ext import ContextTypes

from services.market_data import analyze_symbol


async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTC, ETH, SOL), —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏:"
    )


async def handle_symbol_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    symbol = update.message.text.strip().upper()
    await update.message.reply_text(f"‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ 4H...")

    try:
        result = analyze_symbol(symbol)
        if not result:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è {symbol}.")
            return

        indicators_str = (
            f"–¶—ñ–Ω–∞: {result['price']}\n"
            f"RSI: {result['rsi']}\n"
            f"EMA20: {result['ema20']}, EMA50: {result['ema50']}\n"
            f"MACD: {result['macd']} / {result['macd_signal']}\n"
            f"Bollinger Bands: {result['lower_band']} - {result['upper_band']}\n"
            f"ATR: {result['atr']}\n"
        )

        signal_text = f"\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {result['signal']}"
        if result.get("reason"):
            signal_text += f"\n–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}"

        await update.message.reply_text(
            f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} –Ω–∞ 4H:\n\n"
            f"{indicators_str}"
            f"{signal_text}"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
        print(f"Error in analyze handler: {e}")