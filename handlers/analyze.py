from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from services.market_data import analyze_crypto, get_current_price

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
TIMEFRAMES = {
    "1H": "1h",
    "4H": "4h",
    "12H": "12h"
}

# –ö—Ä–æ–∫ 1: –ö–æ–º–∞–Ω–¥–∞ /analyze
async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTC, ETH, SOL):")

# –ö—Ä–æ–∫ 2: –í–≤—ñ–¥ –º–æ–Ω–µ—Ç–∏
async def handle_symbol_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    symbol = update.message.text.strip().upper()
    context.user_data["symbol"] = symbol

    keyboard = [
        [InlineKeyboardButton(tf, callback_data=f"tf_{TIMEFRAMES[tf]}")]
        for tf in TIMEFRAMES
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìà –û–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è {symbol}:",
        reply_markup=reply_markup
    )

# –ö—Ä–æ–∫ 3: –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
async def handle_timeframe_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    timeframe = query.data.replace("tf_", "")
    symbol = context.user_data.get("symbol")

    await query.edit_message_text(f"‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ {timeframe.upper()}...")

    try:
        result = await analyze_crypto(symbol, timeframe)

        if result is None:
            await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
            return

        indicators_str, entry_price, exit_price, rsi, sma = result

        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
        current_price = get_current_price(symbol)
        if current_price is None:
            current_price_text = "‚ùå –ü–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏."
        else:
            current_price_text = f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price:.5f}$"

        response = (
            f"üìä –ê–Ω–∞–ª—ñ–∑ {symbol} ({timeframe.upper()}):\n"
            f"{indicators_str}\n"
            f"{current_price_text}\n"
            f"üí∞ –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É: {entry_price:.5f}$\n"
            f"üìà –¶—ñ–ª—å –¥–ª—è –≤–∏—Ö–æ–¥—É: {exit_price:.5f}$\n"
            f"üîÅ RSI: {rsi:.5f}\n"
            f"üìä SMA: {sma:.5f}"
        )

        await query.message.reply_text(response)

    except Exception as e:
        await query.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ: {e}")