import logging
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
from services.market_data import get_crypto_prices
from services.groq_client import ask_groq
import telegram

# --- Telegram ---
from config import TELEGRAM_TOKEN

app = FastAPI()
app_telegram = Application.builder().token(TELEGRAM_TOKEN).build()

# --- Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê–Ω–∞–ª—ñ–∑ BTC —Ç–∞ ETH", callback_data="analyze")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –Ø–∫—â–æ —Ü–µ callback
        if update.callback_query:
            await update.callback_query.answer()
            chat_id = update.callback_query.message.chat.id
            await context.bot.send_message(chat_id, "‚è≥ –û—á—ñ–∫—É—é –¥–∞–Ω—ñ...")
        else:
            chat_id = update.message.chat.id
            await context.bot.send_message(chat_id, "‚è≥ –û—á—ñ–∫—É—é –¥–∞–Ω—ñ...")

        prices = get_crypto_prices()  # {'bitcoin': 67000.0, 'ethereum': 3200.0}
        logger.info(f"–¶—ñ–Ω–∏: {prices}")

        prompt = (
            f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTC: ${prices['bitcoin']}, ETH: ${prices['ethereum']}.\n"
            "–ß–∏ –≤–∞—Ä—Ç–æ –≤—Ö–æ–¥–∏—Ç–∏ –≤ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ 1H –≥—Ä–∞—Ñ—ñ–∫—É?\n"
            "–î–∞–π –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ 3 —Ä–µ—á–µ–Ω—å), –∞—Ä–≥—É–º–µ–Ω—Ç—É–π —Ç–µ—Ö–Ω—ñ—á–Ω–æ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."
        )

        response = ask_groq(prompt)

        message = (
            f"üìä –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É:\n"
            f"BTC: ${prices['bitcoin']}\nETH: ${prices['ethereum']}\n\n"
            f"{response}"
        )

        await context.bot.send_message(chat_id=chat_id, text=message)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ analyze: {e}")
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É.")

# --- FastAPI –º–∞—Ä—à—Ä—É—Ç –¥–ª—è webhook ---
@app.post("/webhook")
async def telegram_webhook(req: Request):
    try:
        data = await req.json()
        print(f"‚ö° –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {data}")
        update = Update.de_json(data, app_telegram.bot)
        await app_telegram.process_update(update)
    except Exception as e:
        import traceback
        print("‚ùå –ü–û–ú–ò–õ–ö–ê –í –û–ë–†–û–ë–¶–Ü UPDATE:")
        traceback.print_exc()
    return {"status": "ok"}

# --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ---
app_telegram.add_handler(CommandHandler("start", start))
app_telegram.add_handler(CommandHandler("analyze", analyze))