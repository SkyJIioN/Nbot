from telegram import Update
from telegram.ext import ContextTypes
from services.binance_data import get_crypto_prices
from services.groq_client import ask_groq

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ /analyze –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É.")

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –û—á—ñ–∫—É—é –¥–∞–Ω—ñ –∑ –±—ñ—Ä–∂—ñ...")

    prices = get_crypto_prices()
    if not prices:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω –∑ Binance.")
        return

    btc = prices.get("BTCUSDT")
    eth = prices.get("ETHUSDT")

    if btc is None or eth is None:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º—ñ —Ü—ñ–Ω–∏ –∑ Binance.")
        return

    prompt = (
        f"–¶—ñ–Ω–∞ BTC: {btc}$\n"
        f"–¶—ñ–Ω–∞ ETH: {eth}$\n"
        "–ß–∏ –≤–∞—Ä—Ç–æ –≤—Ö–æ–¥–∏—Ç–∏ –≤ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ 1H –≥—Ä–∞—Ñ—ñ–∫—É –¥–ª—è BTC –∞–±–æ ETH?\n"
        "–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑. –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –î–æ 3 —Ä–µ—á–µ–Ω—å."
    )

    try:
        response = ask_groq(prompt)
        await update.message.reply_text(f"üìä –ê–Ω–∞–ª—ñ–∑:\n{response}")
    except Exception as e:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ Groq API.")