async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ chat_id
        if update.callback_query:
            await update.callback_query.answer()
            chat_id = update.callback_query.message.chat.id
        elif update.message:
            chat_id = update.message.chat.id
        else:
            return  # –Ø–∫—â–æ –Ω–µ–º–∞—î –Ω—ñ callback, –Ω—ñ message ‚Äî –≤–∏—Ö—ñ–¥

        await context.bot.send_message(chat_id, "‚è≥ –û—á—ñ–∫—É—é –¥–∞–Ω—ñ...")

        prices = get_crypto_prices()
        logger.info(f"–¶—ñ–Ω–∏: {prices}")

        prompt = (
            f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTC: ${prices['bitcoin']}, ETH: ${prices['ethereum']}.\n"
            "–ß–∏ –≤–∞—Ä—Ç–æ –≤—Ö–æ–¥–∏—Ç–∏ –≤ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ 1H –≥—Ä–∞—Ñ—ñ–∫—É?\n"
            "–î–∞–π –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ 3 —Ä–µ—á–µ–Ω—å), –∞—Ä–≥—É–º–µ–Ω—Ç—É–π —Ç–µ—Ö–Ω—ñ—á–Ω–æ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."
        )

        response = ask_groq(prompt)

        message = (
            f"üìä –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É:\n"
            f"BTC: ${prices['bitcoin']}\nETH: ${prices['ethereum']}\n\n"
            f"{response}"
        )

        await context.bot.send_message(chat_id=chat_id, text=message)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ analyze: {e}")
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É.")