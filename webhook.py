import logging
from fastapi import APIRouter, Request
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters
)
from services.market_data import get_crypto_prices
from services.groq_client import ask_groq

import os

TOKEN = os.getenv("BOT_TOKEN")  # –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤ Render secrets

router = APIRouter()
app_telegram = Application.builder().token(TOKEN).build()

@router.post("/webhook")
async def process_webhook(request: Request):
    json_data = await request.json()
    update = Update.de_json(json_data, app_telegram.bot)
    await app_telegram.initialize()
    await app_telegram.process_update(update)
    return {"ok": True}

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prices = get_crypto_prices(["bitcoin", "ethereum"])
    await update.message.reply_text(f"DEBUG: {prices}")

app_telegram.add_handler(CommandHandler("debug", debug))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ /analyze –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prices = get_crypto_prices(["bitcoin", "ethereum"])
    if not prices:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ CoinGecko.")
        return

    btc_price = prices.get("bitcoin")
    eth_price = prices.get("ethereum")

    prompt = (
        f"–¶—ñ–Ω–∞ BTC: ${btc_price}, ETH: ${eth_price}. "
        "–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —ñ –≤–∫–∞–∂–∏ –ø—Ä–∏–±–ª–∏–∑–Ω—ñ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥—É —ñ –≤–∏—Ö–æ–¥—É."
    )
    analysis = ask_groq(prompt)

    message = f"""üìä –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É:
BTC: ${btc_price}
ETH: ${eth_price}

ü§ñ –®–Ü: {analysis}"""
    await update.message.reply_text(message)
# –ø–æ–º–∏–ª–∫–∏
from services.market_data import get_crypto_prices
from services.groq_client import ask_groq
import logging

logger = logging.getLogger(__name__)

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ...")

    prices = get_crypto_prices(["bitcoin", "ethereum"])
    logger.info(f"[ANALYZE] –¶—ñ–Ω–∏: {prices}")

    if not prices:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ CoinGecko.")
        return

    try:
        btc_price = prices.get("bitcoin")
        eth_price = prices.get("ethereum")
        
        prompt = (
            f"–¶—ñ–Ω–∏ BTC: {btc_price}$, ETH: {eth_price}$. "
            "–ß–∏ –≤–∞—Ä—Ç–æ –∑–∞—Ä–∞–∑ –≤—Ö–æ–¥–∏—Ç–∏ –≤ –ø–æ–∑–∏—Ü—ñ—é? –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Ö–∞–Ω–∞–ª—ñ–∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."
        )
        
        ai_response = ask_groq(prompt)
        logger.info(f"[GROQ] –í—ñ–¥–ø–æ–≤—ñ–¥—å: {ai_response}")

        if not ai_response or "–Ω/–¥" in ai_response.lower():
            await update.message.reply_text("‚ö†Ô∏è –®–Ü –Ω–µ –∑–º—ñ–≥ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
            return

        await update.message.reply_text(
            f"üìä –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É:\n"
            f"BTC: ${btc_price}\nETH: ${eth_price}\n\n"
            f"{ai_response}"
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ analyze: {e}")
        await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É.")
# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
app_telegram.add_handler(CommandHandler("start", start))
app_telegram.add_handler(CommandHandler("analyze", analyze))